(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[19],{"+D0c":function(e,n){e.exports="/webgpu-samples/_next/static/fee692aa63e7fca506f31d6bd472c045.webm"},"3Fq/":function(e,n,t){"use strict";n.a="@group(0) @binding(1) var mySampler: sampler;\n@group(0) @binding(2) var myTexture: texture_external;\n\n@fragment\nfn main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {\n  return textureSampleLevel(myTexture, mySampler, fragUV);\n}\n"},B9fm:function(e,n,t){"use strict";n.a="@group(0) @binding(0) var mySampler : sampler;\n@group(0) @binding(1) var myTexture : texture_2d<f32>;\n\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragUV : vec2<f32>,\n}\n\n@vertex\nfn vert_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n    vec2<f32>( 1.0,  1.0),\n    vec2<f32>( 1.0, -1.0),\n    vec2<f32>(-1.0, -1.0),\n    vec2<f32>( 1.0,  1.0),\n    vec2<f32>(-1.0, -1.0),\n    vec2<f32>(-1.0,  1.0)\n  );\n\n  var uv = array<vec2<f32>, 6>(\n    vec2<f32>(1.0, 0.0),\n    vec2<f32>(1.0, 1.0),\n    vec2<f32>(0.0, 1.0),\n    vec2<f32>(1.0, 0.0),\n    vec2<f32>(0.0, 1.0),\n    vec2<f32>(0.0, 0.0)\n  );\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  output.fragUV = uv[VertexIndex];\n  return output;\n}\n\n@fragment\nfn frag_main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {\n  return textureSample(myTexture, mySampler, fragUV);\n}\n"},Q4X6:function(e,n,t){"use strict";t.r(n),function(e,r){var a=t("o0o1"),o=t.n(a),i=t("HaE+"),s=t("8i9l"),u=t("B9fm"),c=t("3Fq/"),l=function(){var e=Object(i.a)(o.a.mark((function e(n){var r,a,i,s,l,d,m,p,f,v;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return v=function(){if(r.current){var e=s.createBindGroup({layout:p.getBindGroupLayout(0),entries:[{binding:1,resource:f},{binding:2,resource:s.importExternalTexture({source:a})}]}),n=s.createCommandEncoder(),t={colorAttachments:[{view:d.getCurrentTexture().createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]},o=n.beginRenderPass(t);o.setPipeline(p),o.setBindGroup(0,e),o.draw(6,1,0,0),o.end(),s.queue.submit([n.finish()]),requestAnimationFrame(v)}},r=n.canvasRef,(a=document.createElement("video")).loop=!0,a.autoplay=!0,a.muted=!0,a.src=t("+D0c"),e.next=9,a.play();case 9:return e.next=11,navigator.gpu.requestAdapter();case 11:return i=e.sent,e.next=14,i.requestDevice();case 14:if(s=e.sent,null!==(l=r.current)){e.next=18;break}return e.abrupt("return");case 18:d=l.getContext("webgpu"),m=navigator.gpu.getPreferredCanvasFormat(),d.configure({device:s,format:m,alphaMode:"opaque"}),p=s.createRenderPipeline({layout:"auto",vertex:{module:s.createShaderModule({code:u.a}),entryPoint:"vert_main"},fragment:{module:s.createShaderModule({code:c.a}),entryPoint:"main",targets:[{format:m}]},primitive:{topology:"triangle-list"}}),f=s.createSampler({magFilter:"linear",minFilter:"linear"}),requestAnimationFrame(v);case 24:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}();n.default=function(){return Object(s.a)({name:"Video Uploading",description:"This example shows how to upload video frame to WebGPU.",init:l,sources:[{name:e.substring(r.length+1),contents:"import { makeSample, SampleInit } from '../../components/SampleLayout';\n\nimport fullscreenTexturedQuadWGSL from '../../shaders/fullscreenTexturedQuad.wgsl';\nimport sampleExternalTextureWGSL from '../../shaders/sampleExternalTexture.frag.wgsl';\n\nconst init: SampleInit = async ({ canvasRef }) => {\n  // Set video element\n  const video = document.createElement('video');\n  video.loop = true;\n  video.autoplay = true;\n  video.muted = true;\n  video.src = require('../../../assets/video/pano.webm');\n  await video.play();\n\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n  const canvas = canvasRef.current;\n\n  if (canvas === null) return;\n  const context = canvas.getContext('webgpu') as GPUCanvasContext;\n  const presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n\n  context.configure({\n    device,\n    format: presentationFormat,\n    alphaMode: 'opaque',\n  });\n\n  const pipeline = device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: device.createShaderModule({\n        code: fullscreenTexturedQuadWGSL,\n      }),\n      entryPoint: 'vert_main',\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: sampleExternalTextureWGSL,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: presentationFormat,\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n    },\n  });\n\n  const sampler = device.createSampler({\n    magFilter: 'linear',\n    minFilter: 'linear',\n  });\n\n  function frame() {\n    // Sample is no longer the active page.\n    if (!canvasRef.current) return;\n\n    const uniformBindGroup = device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 1,\n          resource: sampler,\n        },\n        {\n          binding: 2,\n          resource: device.importExternalTexture({\n            source: video,\n          }),\n        },\n      ],\n    });\n\n    const commandEncoder = device.createCommandEncoder();\n    const textureView = context.getCurrentTexture().createView();\n\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: textureView,\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setBindGroup(0, uniformBindGroup);\n    passEncoder.draw(6, 1, 0, 0);\n    passEncoder.end();\n    device.queue.submit([commandEncoder.finish()]);\n\n    requestAnimationFrame(frame);\n  }\n  requestAnimationFrame(frame);\n};\n\nconst VideoUploading: () => JSX.Element = () =>\n  makeSample({\n    name: 'Video Uploading',\n    description: 'This example shows how to upload video frame to WebGPU.',\n    init,\n    sources: [\n      {\n        name: __filename.substring(__dirname.length + 1),\n        contents: __SOURCE__,\n      },\n      {\n        name: '../../shaders/fullscreenTexturedQuad.wgsl',\n        contents: fullscreenTexturedQuadWGSL,\n        editable: true,\n      },\n      {\n        name: '../../shaders/sampleExternalTexture.wgsl',\n        contents: sampleExternalTextureWGSL,\n        editable: true,\n      },\n    ],\n    filename: __filename,\n  });\n\nexport default VideoUploading;\n"},{name:"../../shaders/fullscreenTexturedQuad.wgsl",contents:u.a,editable:!0},{name:"../../shaders/sampleExternalTexture.wgsl",contents:c.a,editable:!0}],filename:e})}}.call(this,"src/sample/videoUploading/main.ts","src/sample/videoUploading")}}]);