(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[17],{B9fm:function(e,n,t){"use strict";n.a="@group(0) @binding(0) var mySampler : sampler;\n@group(0) @binding(1) var myTexture : texture_2d<f32>;\n\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragUV : vec2<f32>,\n}\n\n@vertex\nfn vert_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n    vec2<f32>( 1.0,  1.0),\n    vec2<f32>( 1.0, -1.0),\n    vec2<f32>(-1.0, -1.0),\n    vec2<f32>( 1.0,  1.0),\n    vec2<f32>(-1.0, -1.0),\n    vec2<f32>(-1.0,  1.0)\n  );\n\n  var uv = array<vec2<f32>, 6>(\n    vec2<f32>(1.0, 0.0),\n    vec2<f32>(1.0, 1.0),\n    vec2<f32>(0.0, 1.0),\n    vec2<f32>(1.0, 0.0),\n    vec2<f32>(0.0, 1.0),\n    vec2<f32>(0.0, 0.0)\n  );\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  output.fragUV = uv[VertexIndex];\n  return output;\n}\n\n@fragment\nfn frag_main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {\n  return textureSample(myTexture, mySampler, fragUV);\n}\n"},Umx1:function(e,n,t){"use strict";t.r(n),function(e,r){var i=t("o0o1"),a=t.n(i),u=t("HaE+"),o=t("8i9l"),c=t("opJj"),s=t("B9fm"),d=[4,4],l=function(){var e=Object(u.a)(a.a.mark((function e(n){var r,i,u,o,l,p,m,f,g,b,v,h,x,w,B,P,G,T,U,y,I,S,_,D,R,E,M,k,C,O;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return O=function(){if(r.current){var e=o.createCommandEncoder(),n=e.beginComputePass();n.setPipeline(g),n.setBindGroup(0,S),n.setBindGroup(1,_),n.dispatchWorkgroups(Math.ceil(B/k),Math.ceil(P/d[1])),n.setBindGroup(1,D),n.dispatchWorkgroups(Math.ceil(P/k),Math.ceil(B/d[1]));for(var t=0;t<M.iterations-1;++t)n.setBindGroup(1,R),n.dispatchWorkgroups(Math.ceil(B/k),Math.ceil(P/d[1])),n.setBindGroup(1,D),n.dispatchWorkgroups(Math.ceil(P/k),Math.ceil(B/d[1]));n.end();var i=e.beginRenderPass({colorAttachments:[{view:l.getCurrentTexture().createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]});i.setPipeline(b),i.setBindGroup(0,E),i.draw(6,1,0,0),i.end(),o.queue.submit([e.finish()]),requestAnimationFrame(O)}},r=n.canvasRef,i=n.gui,e.next=4,navigator.gpu.requestAdapter();case 4:return u=e.sent,e.next=7,u.requestDevice();case 7:if(o=e.sent,null!==r.current){e.next=10;break}return e.abrupt("return");case 10:return l=r.current.getContext("webgpu"),p=window.devicePixelRatio||1,m=[r.current.clientWidth*p,r.current.clientHeight*p],f=navigator.gpu.getPreferredCanvasFormat(),l.configure({device:o,size:m,format:f,alphaMode:"opaque"}),g=o.createComputePipeline({layout:"auto",compute:{module:o.createShaderModule({code:c.a}),entryPoint:"main"}}),b=o.createRenderPipeline({layout:"auto",vertex:{module:o.createShaderModule({code:s.a}),entryPoint:"vert_main"},fragment:{module:o.createShaderModule({code:s.a}),entryPoint:"frag_main",targets:[{format:f}]},primitive:{topology:"triangle-list"}}),v=o.createSampler({magFilter:"linear",minFilter:"linear"}),(h=document.createElement("img")).src=t("neuz"),e.next=22,h.decode();case 22:return e.next=24,createImageBitmap(h);case 24:x=e.sent,w=[x.width,x.height],B=w[0],P=w[1],G=o.createTexture({size:[B,P,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),o.queue.copyExternalImageToTexture({source:x},{texture:G},[x.width,x.height]),T=[0,1].map((function(){return o.createTexture({size:{width:B,height:P},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING})})),U=function(){var e=o.createBuffer({size:4,mappedAtCreation:!0,usage:GPUBufferUsage.UNIFORM});return new Uint32Array(e.getMappedRange())[0]=0,e.unmap(),e}(),y=function(){var e=o.createBuffer({size:4,mappedAtCreation:!0,usage:GPUBufferUsage.UNIFORM});return new Uint32Array(e.getMappedRange())[0]=1,e.unmap(),e}(),I=o.createBuffer({size:8,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),S=o.createBindGroup({layout:g.getBindGroupLayout(0),entries:[{binding:0,resource:v},{binding:1,resource:{buffer:I}}]}),_=o.createBindGroup({layout:g.getBindGroupLayout(1),entries:[{binding:1,resource:G.createView()},{binding:2,resource:T[0].createView()},{binding:3,resource:{buffer:U}}]}),D=o.createBindGroup({layout:g.getBindGroupLayout(1),entries:[{binding:1,resource:T[0].createView()},{binding:2,resource:T[1].createView()},{binding:3,resource:{buffer:y}}]}),R=o.createBindGroup({layout:g.getBindGroupLayout(1),entries:[{binding:1,resource:T[1].createView()},{binding:2,resource:T[0].createView()},{binding:3,resource:{buffer:U}}]}),E=o.createBindGroup({layout:b.getBindGroupLayout(0),entries:[{binding:0,resource:v},{binding:1,resource:T[1].createView()}]}),M={filterSize:15,iterations:2},C=function(){k=128-(M.filterSize-1),o.queue.writeBuffer(I,0,new Uint32Array([M.filterSize,k]))},i.add(M,"filterSize",1,33).step(2).onChange(C),i.add(M,"iterations",1,10).step(1),C(),requestAnimationFrame(O);case 43:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}();n.default=function(){return Object(o.a)({name:"Image Blur",description:"This example shows how to blur an image using a WebGPU compute shader.",gui:!0,init:l,sources:[{name:e.substring(r.length+1),contents:"import { makeSample, SampleInit } from '../../components/SampleLayout';\n\nimport blurWGSL from './blur.wgsl';\nimport fullscreenTexturedQuadWGSL from '../../shaders/fullscreenTexturedQuad.wgsl';\n\n// Contants from the blur.wgsl shader.\nconst tileDim = 128;\nconst batch = [4, 4];\n\nconst init: SampleInit = async ({ canvasRef, gui }) => {\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n\n  if (canvasRef.current === null) return;\n  const context = canvasRef.current.getContext('webgpu') as GPUCanvasContext;\n\n  const devicePixelRatio = window.devicePixelRatio || 1;\n  const presentationSize = [\n    canvasRef.current.clientWidth * devicePixelRatio,\n    canvasRef.current.clientHeight * devicePixelRatio,\n  ];\n  const presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n\n  context.configure({\n    device,\n    size: presentationSize,\n    format: presentationFormat,\n    alphaMode: 'opaque',\n  });\n\n  const blurPipeline = device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: device.createShaderModule({\n        code: blurWGSL,\n      }),\n      entryPoint: 'main',\n    },\n  });\n\n  const fullscreenQuadPipeline = device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: device.createShaderModule({\n        code: fullscreenTexturedQuadWGSL,\n      }),\n      entryPoint: 'vert_main',\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: fullscreenTexturedQuadWGSL,\n      }),\n      entryPoint: 'frag_main',\n      targets: [\n        {\n          format: presentationFormat,\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n    },\n  });\n\n  const sampler = device.createSampler({\n    magFilter: 'linear',\n    minFilter: 'linear',\n  });\n\n  const img = document.createElement('img');\n  img.src = require('../../../assets/img/Di-3d.png');\n  await img.decode();\n  const imageBitmap = await createImageBitmap(img);\n\n  const [srcWidth, srcHeight] = [imageBitmap.width, imageBitmap.height];\n  const cubeTexture = device.createTexture({\n    size: [srcWidth, srcHeight, 1],\n    format: 'rgba8unorm',\n    usage:\n      GPUTextureUsage.TEXTURE_BINDING |\n      GPUTextureUsage.COPY_DST |\n      GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  device.queue.copyExternalImageToTexture(\n    { source: imageBitmap },\n    { texture: cubeTexture },\n    [imageBitmap.width, imageBitmap.height]\n  );\n\n  const textures = [0, 1].map(() => {\n    return device.createTexture({\n      size: {\n        width: srcWidth,\n        height: srcHeight,\n      },\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.STORAGE_BINDING |\n        GPUTextureUsage.TEXTURE_BINDING,\n    });\n  });\n\n  const buffer0 = (() => {\n    const buffer = device.createBuffer({\n      size: 4,\n      mappedAtCreation: true,\n      usage: GPUBufferUsage.UNIFORM,\n    });\n    new Uint32Array(buffer.getMappedRange())[0] = 0;\n    buffer.unmap();\n    return buffer;\n  })();\n\n  const buffer1 = (() => {\n    const buffer = device.createBuffer({\n      size: 4,\n      mappedAtCreation: true,\n      usage: GPUBufferUsage.UNIFORM,\n    });\n    new Uint32Array(buffer.getMappedRange())[0] = 1;\n    buffer.unmap();\n    return buffer;\n  })();\n\n  const blurParamsBuffer = device.createBuffer({\n    size: 8,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n  });\n\n  const computeConstants = device.createBindGroup({\n    layout: blurPipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: sampler,\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: blurParamsBuffer,\n        },\n      },\n    ],\n  });\n\n  const computeBindGroup0 = device.createBindGroup({\n    layout: blurPipeline.getBindGroupLayout(1),\n    entries: [\n      {\n        binding: 1,\n        resource: cubeTexture.createView(),\n      },\n      {\n        binding: 2,\n        resource: textures[0].createView(),\n      },\n      {\n        binding: 3,\n        resource: {\n          buffer: buffer0,\n        },\n      },\n    ],\n  });\n\n  const computeBindGroup1 = device.createBindGroup({\n    layout: blurPipeline.getBindGroupLayout(1),\n    entries: [\n      {\n        binding: 1,\n        resource: textures[0].createView(),\n      },\n      {\n        binding: 2,\n        resource: textures[1].createView(),\n      },\n      {\n        binding: 3,\n        resource: {\n          buffer: buffer1,\n        },\n      },\n    ],\n  });\n\n  const computeBindGroup2 = device.createBindGroup({\n    layout: blurPipeline.getBindGroupLayout(1),\n    entries: [\n      {\n        binding: 1,\n        resource: textures[1].createView(),\n      },\n      {\n        binding: 2,\n        resource: textures[0].createView(),\n      },\n      {\n        binding: 3,\n        resource: {\n          buffer: buffer0,\n        },\n      },\n    ],\n  });\n\n  const showResultBindGroup = device.createBindGroup({\n    layout: fullscreenQuadPipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: sampler,\n      },\n      {\n        binding: 1,\n        resource: textures[1].createView(),\n      },\n    ],\n  });\n\n  const settings = {\n    filterSize: 15,\n    iterations: 2,\n  };\n\n  let blockDim: number;\n  const updateSettings = () => {\n    blockDim = tileDim - (settings.filterSize - 1);\n    device.queue.writeBuffer(\n      blurParamsBuffer,\n      0,\n      new Uint32Array([settings.filterSize, blockDim])\n    );\n  };\n  gui.add(settings, 'filterSize', 1, 33).step(2).onChange(updateSettings);\n  gui.add(settings, 'iterations', 1, 10).step(1);\n\n  updateSettings();\n\n  function frame() {\n    // Sample is no longer the active page.\n    if (!canvasRef.current) return;\n\n    const commandEncoder = device.createCommandEncoder();\n\n    const computePass = commandEncoder.beginComputePass();\n    computePass.setPipeline(blurPipeline);\n    computePass.setBindGroup(0, computeConstants);\n\n    computePass.setBindGroup(1, computeBindGroup0);\n    computePass.dispatchWorkgroups(\n      Math.ceil(srcWidth / blockDim),\n      Math.ceil(srcHeight / batch[1])\n    );\n\n    computePass.setBindGroup(1, computeBindGroup1);\n    computePass.dispatchWorkgroups(\n      Math.ceil(srcHeight / blockDim),\n      Math.ceil(srcWidth / batch[1])\n    );\n\n    for (let i = 0; i < settings.iterations - 1; ++i) {\n      computePass.setBindGroup(1, computeBindGroup2);\n      computePass.dispatchWorkgroups(\n        Math.ceil(srcWidth / blockDim),\n        Math.ceil(srcHeight / batch[1])\n      );\n\n      computePass.setBindGroup(1, computeBindGroup1);\n      computePass.dispatchWorkgroups(\n        Math.ceil(srcHeight / blockDim),\n        Math.ceil(srcWidth / batch[1])\n      );\n    }\n\n    computePass.end();\n\n    const passEncoder = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: context.getCurrentTexture().createView(),\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n\n    passEncoder.setPipeline(fullscreenQuadPipeline);\n    passEncoder.setBindGroup(0, showResultBindGroup);\n    passEncoder.draw(6, 1, 0, 0);\n    passEncoder.end();\n    device.queue.submit([commandEncoder.finish()]);\n\n    requestAnimationFrame(frame);\n  }\n  requestAnimationFrame(frame);\n};\n\nconst ImageBlur: () => JSX.Element = () =>\n  makeSample({\n    name: 'Image Blur',\n    description:\n      'This example shows how to blur an image using a WebGPU compute shader.',\n    gui: true,\n    init,\n    sources: [\n      {\n        name: __filename.substring(__dirname.length + 1),\n        contents: __SOURCE__,\n      },\n      {\n        name: './blur.wgsl',\n        contents: blurWGSL,\n        editable: true,\n      },\n      {\n        name: '../../shaders/fullscreenTexturedQuad.wgsl',\n        contents: fullscreenTexturedQuadWGSL,\n        editable: true,\n      },\n    ],\n    filename: __filename,\n  });\n\nexport default ImageBlur;\n"},{name:"./blur.wgsl",contents:c.a,editable:!0},{name:"../../shaders/fullscreenTexturedQuad.wgsl",contents:s.a,editable:!0}],filename:e})}}.call(this,"src/sample/imageBlur/main.ts","src/sample/imageBlur")},neuz:function(e,n){e.exports="/webgpu-samples/_next/static/e04932ba9c013b60ddb249577c386914.png"},opJj:function(e,n,t){"use strict";n.a="struct Params {\n  filterDim : u32,\n  blockDim : u32,\n}\n\n@group(0) @binding(0) var samp : sampler;\n@group(0) @binding(1) var<uniform> params : Params;\n@group(1) @binding(1) var inputTex : texture_2d<f32>;\n@group(1) @binding(2) var outputTex : texture_storage_2d<rgba8unorm, write>;\n\nstruct Flip {\n  value : u32,\n}\n@group(1) @binding(3) var<uniform> flip : Flip;\n\n// This shader blurs the input texture in one direction, depending on whether\n// |flip.value| is 0 or 1.\n// It does so by running (128 / 4) threads per workgroup to load 128\n// texels into 4 rows of shared memory. Each thread loads a\n// 4 x 4 block of texels to take advantage of the texture sampling\n// hardware.\n// Then, each thread computes the blur result by averaging the adjacent texel values\n// in shared memory.\n// Because we're operating on a subset of the texture, we cannot compute all of the\n// results since not all of the neighbors are available in shared memory.\n// Specifically, with 128 x 128 tiles, we can only compute and write out\n// square blocks of size 128 - (filterSize - 1). We compute the number of blocks\n// needed in Javascript and dispatch that amount.\n\nvar<workgroup> tile : array<array<vec3<f32>, 128>, 4>;\n\n@compute @workgroup_size(32, 1, 1)\nfn main(\n  @builtin(workgroup_id) WorkGroupID : vec3<u32>,\n  @builtin(local_invocation_id) LocalInvocationID : vec3<u32>\n) {\n  let filterOffset : u32 = (params.filterDim - 1u) / 2u;\n  let dims : vec2<i32> = textureDimensions(inputTex, 0);\n\n  let baseIndex = vec2<i32>(\n    WorkGroupID.xy * vec2<u32>(params.blockDim, 4u) +\n    LocalInvocationID.xy * vec2<u32>(4u, 1u)\n  ) - vec2<i32>(i32(filterOffset), 0);\n\n  for (var r : u32 = 0u; r < 4u; r = r + 1u) {\n    for (var c : u32 = 0u; c < 4u; c = c + 1u) {\n      var loadIndex = baseIndex + vec2<i32>(i32(c), i32(r));\n      if (flip.value != 0u) {\n        loadIndex = loadIndex.yx;\n      }\n\n      tile[r][4u * LocalInvocationID.x + c] = textureSampleLevel(\n        inputTex,\n        samp,\n        (vec2<f32>(loadIndex) + vec2<f32>(0.25, 0.25)) / vec2<f32>(dims), \n        0.0\n      ).rgb;\n    }\n  }\n\n  workgroupBarrier();\n\n  for (var r : u32 = 0u; r < 4u; r = r + 1u) {\n    for (var c : u32 = 0u; c < 4u; c = c + 1u) {\n      var writeIndex = baseIndex + vec2<i32>(i32(c), i32(r));\n      if (flip.value != 0u) {\n        writeIndex = writeIndex.yx;\n      }\n\n      let center : u32 = 4u * LocalInvocationID.x + c;\n      if (center >= filterOffset &&\n          center < 128u - filterOffset &&\n          all(writeIndex < dims)) {\n        var acc : vec3<f32> = vec3<f32>(0.0, 0.0, 0.0);\n        for (var f : u32 = 0u; f < params.filterDim; f = f + 1u) {\n          var i : u32 = center + f - filterOffset;\n          acc = acc + (1.0 / f32(params.filterDim)) * tile[r][i];\n        }\n        textureStore(outputTex, writeIndex, vec4<f32>(acc, 1.0));\n      }\n    }\n  }\n}\n"}}]);