(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[21],{QjI5:function(e,n,a){"use strict";n.a="struct Particle {\n  pos : vec2<f32>,\n  vel : vec2<f32>,\n}\nstruct SimParams {\n  deltaT : f32,\n  rule1Distance : f32,\n  rule2Distance : f32,\n  rule3Distance : f32,\n  rule1Scale : f32,\n  rule2Scale : f32,\n  rule3Scale : f32,\n}\nstruct Particles {\n  particles : array<Particle>,\n}\n@binding(0) @group(0) var<uniform> params : SimParams;\n@binding(1) @group(0) var<storage, read> particlesA : Particles;\n@binding(2) @group(0) var<storage, read_write> particlesB : Particles;\n\n// https://github.com/austinEng/Project6-Vulkan-Flocking/blob/master/data/shaders/computeparticles/particle.comp\n@compute @workgroup_size(64)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var index : u32 = GlobalInvocationID.x;\n\n  var vPos = particlesA.particles[index].pos;\n  var vVel = particlesA.particles[index].vel;\n  var cMass = vec2<f32>(0.0, 0.0);\n  var cVel = vec2<f32>(0.0, 0.0);\n  var colVel = vec2<f32>(0.0, 0.0);\n  var cMassCount : u32 = 0u;\n  var cVelCount : u32 = 0u;\n  var pos : vec2<f32>;\n  var vel : vec2<f32>;\n\n  for (var i : u32 = 0u; i < arrayLength(&particlesA.particles); i = i + 1u) {\n    if (i == index) {\n      continue;\n    }\n\n    pos = particlesA.particles[i].pos.xy;\n    vel = particlesA.particles[i].vel.xy;\n    if (distance(pos, vPos) < params.rule1Distance) {\n      cMass = cMass + pos;\n      cMassCount = cMassCount + 1u;\n    }\n    if (distance(pos, vPos) < params.rule2Distance) {\n      colVel = colVel - (pos - vPos);\n    }\n    if (distance(pos, vPos) < params.rule3Distance) {\n      cVel = cVel + vel;\n      cVelCount = cVelCount + 1u;\n    }\n  }\n  if (cMassCount > 0u) {\n    var temp = f32(cMassCount);\n    cMass = (cMass / vec2<f32>(temp, temp)) - vPos;\n  }\n  if (cVelCount > 0u) {\n    var temp = f32(cVelCount);\n    cVel = cVel / vec2<f32>(temp, temp);\n  }\n  vVel = vVel + (cMass * params.rule1Scale) + (colVel * params.rule2Scale) +\n      (cVel * params.rule3Scale);\n\n  // clamp velocity for a more pleasing simulation\n  vVel = normalize(vVel) * clamp(length(vVel), 0.0, 0.1);\n  // kinematic update\n  vPos = vPos + (vVel * params.deltaT);\n  // Wrap around boundary\n  if (vPos.x < -1.0) {\n    vPos.x = 1.0;\n  }\n  if (vPos.x > 1.0) {\n    vPos.x = -1.0;\n  }\n  if (vPos.y < -1.0) {\n    vPos.y = 1.0;\n  }\n  if (vPos.y > 1.0) {\n    vPos.y = -1.0;\n  }\n  // Write back\n  particlesB.particles[index].pos = vPos;\n  particlesB.particles[index].vel = vVel;\n}\n"},RDV1:function(e,n,a){"use strict";n.a="@vertex\nfn vert_main(\n  @location(0) a_particlePos : vec2<f32>,\n  @location(1) a_particleVel : vec2<f32>,\n  @location(2) a_pos : vec2<f32>\n) -> @builtin(position) vec4<f32> {\n  let angle = -atan2(a_particleVel.x, a_particleVel.y);\n  let pos = vec2<f32>(\n    (a_pos.x * cos(angle)) - (a_pos.y * sin(angle)),\n    (a_pos.x * sin(angle)) + (a_pos.y * cos(angle))\n  );\n  return vec4<f32>(pos + a_particlePos, 0.0, 1.0);\n}\n\n@fragment\nfn frag_main() -> @location(0) vec4<f32> {\n  return vec4<f32>(1.0, 1.0, 1.0, 1.0);\n}\n"},YdKy:function(e,n,a){"use strict";a.r(n),function(e,t){var r=a("o0o1"),i=a.n(r),s=a("HaE+"),o=a("8i9l"),c=a("RDV1"),u=a("QjI5"),l=function(){var e=Object(s.a)(i.a.mark((function e(n){var a,t,r,s,o,l,p,f,d,m,v,g,P,h,b,y,B,S,x,w,E,V,A,D,M,_;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return _=function(){if(o){v.colorAttachments[0].view=l.getCurrentTexture().createView();var e=s.createCommandEncoder(),n=e.beginComputePass();n.setPipeline(m),n.setBindGroup(0,V[M%2]),n.dispatchWorkgroups(Math.ceil(S/64)),n.end();var a=e.beginRenderPass(v);a.setPipeline(d),a.setVertexBuffer(0,E[(M+1)%2]),a.setVertexBuffer(1,P),a.draw(3,S,0,0),a.end(),s.queue.submit([e.finish()]),++M,requestAnimationFrame(_)}},B=function(){s.queue.writeBuffer(y,0,new Float32Array([h.deltaT,h.rule1Distance,h.rule2Distance,h.rule3Distance,h.rule1Scale,h.rule2Scale,h.rule3Scale]))},a=n.canvasRef,t=n.gui,e.next=5,navigator.gpu.requestAdapter();case 5:return r=e.sent,e.next=8,r.requestDevice();case 8:if(s=e.sent,null!==(o=a.current)){e.next=12;break}return e.abrupt("return");case 12:for(l=o.getContext("webgpu"),p=navigator.gpu.getPreferredCanvasFormat(),l.configure({device:s,format:p,alphaMode:"opaque"}),f=s.createShaderModule({code:c.a}),d=s.createRenderPipeline({layout:"auto",vertex:{module:f,entryPoint:"vert_main",buffers:[{arrayStride:16,stepMode:"instance",attributes:[{shaderLocation:0,offset:0,format:"float32x2"},{shaderLocation:1,offset:8,format:"float32x2"}]},{arrayStride:8,stepMode:"vertex",attributes:[{shaderLocation:2,offset:0,format:"float32x2"}]}]},fragment:{module:f,entryPoint:"frag_main",targets:[{format:p}]},primitive:{topology:"triangle-list"}}),m=s.createComputePipeline({layout:"auto",compute:{module:s.createShaderModule({code:u.a}),entryPoint:"main"}}),v={colorAttachments:[{view:void 0,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]},g=new Float32Array([-.01,-.02,.01,-.02,0,.02]),P=s.createBuffer({size:g.byteLength,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0}),new Float32Array(P.getMappedRange()).set(g),P.unmap(),h={deltaT:.04,rule1Distance:.1,rule2Distance:.025,rule3Distance:.025,rule1Scale:.02,rule2Scale:.05,rule3Scale:.005},b=7*Float32Array.BYTES_PER_ELEMENT,y=s.createBuffer({size:b,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),B(),Object.keys(h).forEach((function(e){t.add(h,e).onFinishChange(B)})),S=1500,x=new Float32Array(4*S),w=0;w<S;++w)x[4*w+0]=2*(Math.random()-.5),x[4*w+1]=2*(Math.random()-.5),x[4*w+2]=2*(Math.random()-.5)*.1,x[4*w+3]=2*(Math.random()-.5)*.1;for(E=new Array(2),V=new Array(2),A=0;A<2;++A)E[A]=s.createBuffer({size:x.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE,mappedAtCreation:!0}),new Float32Array(E[A].getMappedRange()).set(x),E[A].unmap();for(D=0;D<2;++D)V[D]=s.createBindGroup({layout:m.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:y}},{binding:1,resource:{buffer:E[D],offset:0,size:x.byteLength}},{binding:2,resource:{buffer:E[(D+1)%2],offset:0,size:x.byteLength}}]});M=0,requestAnimationFrame(_);case 37:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}();n.default=function(){return Object(o.a)({name:"Compute Boids",description:"A GPU compute particle simulation that mimics the flocking behavior of birds. A compute shader updates two ping-pong buffers which store particle data. The data is used to draw instanced particles.",gui:!0,init:l,sources:[{name:e.substring(t.length+1),contents:"import { makeSample, SampleInit } from '../../components/SampleLayout';\n\nimport spriteWGSL from './sprite.wgsl';\nimport updateSpritesWGSL from './updateSprites.wgsl';\n\nconst init: SampleInit = async ({ canvasRef, gui }) => {\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n  const canvas = canvasRef.current;\n\n  if (canvas === null) return;\n  const context = canvas.getContext('webgpu') as GPUCanvasContext;\n  const presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n\n  context.configure({\n    device,\n    format: presentationFormat,\n    alphaMode: 'opaque',\n  });\n\n  const spriteShaderModule = device.createShaderModule({ code: spriteWGSL });\n  const renderPipeline = device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: spriteShaderModule,\n      entryPoint: 'vert_main',\n      buffers: [\n        {\n          // instanced particles buffer\n          arrayStride: 4 * 4,\n          stepMode: 'instance',\n          attributes: [\n            {\n              // instance position\n              shaderLocation: 0,\n              offset: 0,\n              format: 'float32x2',\n            },\n            {\n              // instance velocity\n              shaderLocation: 1,\n              offset: 2 * 4,\n              format: 'float32x2',\n            },\n          ],\n        },\n        {\n          // vertex buffer\n          arrayStride: 2 * 4,\n          stepMode: 'vertex',\n          attributes: [\n            {\n              // vertex positions\n              shaderLocation: 2,\n              offset: 0,\n              format: 'float32x2',\n            },\n          ],\n        },\n      ],\n    },\n    fragment: {\n      module: spriteShaderModule,\n      entryPoint: 'frag_main',\n      targets: [\n        {\n          format: presentationFormat,\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n    },\n  });\n\n  const computePipeline = device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: device.createShaderModule({\n        code: updateSpritesWGSL,\n      }),\n      entryPoint: 'main',\n    },\n  });\n\n  const renderPassDescriptor: GPURenderPassDescriptor = {\n    colorAttachments: [\n      {\n        view: undefined, // Assigned later\n        clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n        loadOp: 'clear',\n        storeOp: 'store',\n      },\n    ],\n  };\n\n  // prettier-ignore\n  const vertexBufferData = new Float32Array([\n    -0.01, -0.02, 0.01,\n    -0.02, 0.0, 0.02,\n  ]);\n\n  const spriteVertexBuffer = device.createBuffer({\n    size: vertexBufferData.byteLength,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n  new Float32Array(spriteVertexBuffer.getMappedRange()).set(vertexBufferData);\n  spriteVertexBuffer.unmap();\n\n  const simParams = {\n    deltaT: 0.04,\n    rule1Distance: 0.1,\n    rule2Distance: 0.025,\n    rule3Distance: 0.025,\n    rule1Scale: 0.02,\n    rule2Scale: 0.05,\n    rule3Scale: 0.005,\n  };\n\n  const simParamBufferSize = 7 * Float32Array.BYTES_PER_ELEMENT;\n  const simParamBuffer = device.createBuffer({\n    size: simParamBufferSize,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n  });\n\n  function updateSimParams() {\n    device.queue.writeBuffer(\n      simParamBuffer,\n      0,\n      new Float32Array([\n        simParams.deltaT,\n        simParams.rule1Distance,\n        simParams.rule2Distance,\n        simParams.rule3Distance,\n        simParams.rule1Scale,\n        simParams.rule2Scale,\n        simParams.rule3Scale,\n      ])\n    );\n  }\n\n  updateSimParams();\n  Object.keys(simParams).forEach((k) => {\n    gui.add(simParams, k).onFinishChange(updateSimParams);\n  });\n\n  const numParticles = 1500;\n  const initialParticleData = new Float32Array(numParticles * 4);\n  for (let i = 0; i < numParticles; ++i) {\n    initialParticleData[4 * i + 0] = 2 * (Math.random() - 0.5);\n    initialParticleData[4 * i + 1] = 2 * (Math.random() - 0.5);\n    initialParticleData[4 * i + 2] = 2 * (Math.random() - 0.5) * 0.1;\n    initialParticleData[4 * i + 3] = 2 * (Math.random() - 0.5) * 0.1;\n  }\n\n  const particleBuffers: GPUBuffer[] = new Array(2);\n  const particleBindGroups: GPUBindGroup[] = new Array(2);\n  for (let i = 0; i < 2; ++i) {\n    particleBuffers[i] = device.createBuffer({\n      size: initialParticleData.byteLength,\n      usage: GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE,\n      mappedAtCreation: true,\n    });\n    new Float32Array(particleBuffers[i].getMappedRange()).set(\n      initialParticleData\n    );\n    particleBuffers[i].unmap();\n  }\n\n  for (let i = 0; i < 2; ++i) {\n    particleBindGroups[i] = device.createBindGroup({\n      layout: computePipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: simParamBuffer,\n          },\n        },\n        {\n          binding: 1,\n          resource: {\n            buffer: particleBuffers[i],\n            offset: 0,\n            size: initialParticleData.byteLength,\n          },\n        },\n        {\n          binding: 2,\n          resource: {\n            buffer: particleBuffers[(i + 1) % 2],\n            offset: 0,\n            size: initialParticleData.byteLength,\n          },\n        },\n      ],\n    });\n  }\n\n  let t = 0;\n  function frame() {\n    // Sample is no longer the active page.\n    if (!canvas) return;\n\n    renderPassDescriptor.colorAttachments[0].view = context\n      .getCurrentTexture()\n      .createView();\n\n    const commandEncoder = device.createCommandEncoder();\n    {\n      const passEncoder = commandEncoder.beginComputePass();\n      passEncoder.setPipeline(computePipeline);\n      passEncoder.setBindGroup(0, particleBindGroups[t % 2]);\n      passEncoder.dispatchWorkgroups(Math.ceil(numParticles / 64));\n      passEncoder.end();\n    }\n    {\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(renderPipeline);\n      passEncoder.setVertexBuffer(0, particleBuffers[(t + 1) % 2]);\n      passEncoder.setVertexBuffer(1, spriteVertexBuffer);\n      passEncoder.draw(3, numParticles, 0, 0);\n      passEncoder.end();\n    }\n    device.queue.submit([commandEncoder.finish()]);\n\n    ++t;\n    requestAnimationFrame(frame);\n  }\n  requestAnimationFrame(frame);\n};\n\nconst ComputeBoids: () => JSX.Element = () =>\n  makeSample({\n    name: 'Compute Boids',\n    description:\n      'A GPU compute particle simulation that mimics \\\nthe flocking behavior of birds. A compute shader updates \\\ntwo ping-pong buffers which store particle data. The data \\\nis used to draw instanced particles.',\n    gui: true,\n    init,\n    sources: [\n      {\n        name: __filename.substring(__dirname.length + 1),\n        contents: __SOURCE__,\n      },\n      {\n        name: 'updateSprites.wgsl',\n        contents: updateSpritesWGSL,\n        editable: true,\n      },\n      {\n        name: 'sprite.wgsl',\n        contents: spriteWGSL,\n        editable: true,\n      },\n    ],\n    filename: __filename,\n  });\n\nexport default ComputeBoids;\n"},{name:"updateSprites.wgsl",contents:u.a,editable:!0},{name:"sprite.wgsl",contents:c.a,editable:!0}],filename:e})}}.call(this,"src/sample/computeBoids/main.ts","src/sample/computeBoids")}}]);