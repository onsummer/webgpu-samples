(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[25],{X6Bz:function(e,n,r){"use strict";n.a="struct Time {\n  value : f32,\n}\n\nstruct Uniforms {\n  scale : f32,\n  offsetX : f32,\n  offsetY : f32,\n  scalar : f32,\n  scalarOffset : f32,\n}\n\n@binding(0) @group(0) var<uniform> time : Time;\n@binding(0) @group(1) var<uniform> uniforms : Uniforms;\n\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) v_color : vec4<f32>,\n}\n\n@vertex\nfn vert_main(\n  @location(0) position : vec4<f32>,\n  @location(1) color : vec4<f32>\n) -> VertexOutput {\n  var fade : f32 = (uniforms.scalarOffset + time.value * uniforms.scalar / 10.0) % 1.0;\n  if (fade < 0.5) {\n    fade = fade * 2.0;\n  } else {\n    fade = (1.0 - fade) * 2.0;\n  }\n  var xpos : f32 = position.x * uniforms.scale;\n  var ypos : f32 = position.y * uniforms.scale;\n  var angle : f32 = 3.14159 * 2.0 * fade;\n  var xrot : f32 = xpos * cos(angle) - ypos * sin(angle);\n  var yrot : f32 = xpos * sin(angle) + ypos * cos(angle);\n  xpos = xrot + uniforms.offsetX;\n  ypos = yrot + uniforms.offsetY;\n  \n  var output : VertexOutput;\n  output.v_color = vec4<f32>(fade, 1.0 - fade, 0.0, 1.0) + color;\n  output.Position = vec4<f32>(xpos, ypos, 0.0, 1.0);\n  return output;\n}\n\n@fragment\nfn frag_main(@location(0) v_color : vec4<f32>) -> @location(0) vec4<f32> {\n  return v_color;\n}"},jH90:function(e,n,r){"use strict";r.r(n),function(e,t){var a=r("o0o1"),i=r.n(a),o=r("rePB"),s=r("HaE+"),f=r("8i9l"),u=r("X6Bz");function c(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function d(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?c(Object(r),!0).forEach((function(n){Object(o.a)(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}var m=function(){var e=Object(s.a)(i.a.mark((function e(n){var r,t,a,o,s,f,c,m,l,p,g,y,E,v,B,T,b,P,h,_,A,S,w,G,L,F,M,O,x,R;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return R=function(e){if(s){var n=0;void 0!==F&&(n=e-F),F=e;var r=performance.now();G(e);var t=performance.now()-r;void 0===O&&(O=n),void 0===M&&(M=t);var a=.2;O=.8*O+a*n,M=.8*M+a*t,x&&(c.innerHTML="Avg Javascript: ".concat(M.toFixed(2)," ms\nAvg Frame: ").concat(O.toFixed(2)," ms"),x=!1,setTimeout((function(){x=!0}),100)),requestAnimationFrame(R)}},w=function(){for(var e=l.numTriangles,n=5*Float32Array.BYTES_PER_ELEMENT,r=256*Math.ceil(n/256),t=r/Float32Array.BYTES_PER_ELEMENT,a=o.createBuffer({size:e*r+Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),i=new Float32Array(e*t),s=new Array(e),f=0;f<e;++f)i[t*f+0]=.2*Math.random()+.2,i[t*f+1]=1.8*(Math.random()-.5),i[t*f+2]=1.8*(Math.random()-.5),i[t*f+3]=1.5*Math.random()+.5,i[t*f+4]=10*Math.random(),s[f]=o.createBindGroup({layout:E,entries:[{binding:0,resource:{buffer:a,offset:f*r,size:6*Float32Array.BYTES_PER_ELEMENT}}]});for(var u=o.createBindGroup({layout:v,entries:[{binding:0,resource:{buffer:a,offset:0,size:6*Float32Array.BYTES_PER_ELEMENT}}]}),c=e*r,d=o.createBindGroup({layout:y,entries:[{binding:0,resource:{buffer:a,offset:c,size:Float32Array.BYTES_PER_ELEMENT}}]}),m=14680064/Float32Array.BYTES_PER_ELEMENT,B=0;B<i.length;B+=m){var T=Math.min(i.length-B,m);o.queue.writeBuffer(a,B*Float32Array.BYTES_PER_ELEMENT,i.buffer,i.byteOffset+B*Float32Array.BYTES_PER_ELEMENT,T*Float32Array.BYTES_PER_ELEMENT)}function b(n){l.dynamicOffsets?n.setPipeline(A):n.setPipeline(_),n.setVertexBuffer(0,S),n.setBindGroup(0,d);for(var t=[0],a=0;a<e;++a)l.dynamicOffsets?(t[0]=a*r,n.setBindGroup(1,u,t)):n.setBindGroup(1,s[a]),n.draw(3,1,0,0)}var P=void 0,h=new Float32Array([0]),w={colorAttachments:[{view:void 0,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]},G=o.createRenderBundleEncoder({colorFormats:[g]});b(G);var L=G.finish();return function(e){void 0===P&&(P=e),h[0]=(e-P)/1e3,o.queue.writeBuffer(a,c,h.buffer),w.colorAttachments[0].view=p.getCurrentTexture().createView();var n=o.createCommandEncoder(),r=n.beginRenderPass(w);l.renderBundles?r.executeBundles([L]):b(r),r.end(),o.queue.submit([n.finish()])}},r=n.canvasRef,t=n.gui,e.next=5,navigator.gpu.requestAdapter();case 5:return a=e.sent,e.next=8,a.requestDevice();case 8:if(o=e.sent,null!==(s=r.current)){e.next=12;break}return e.abrupt("return");case 12:(f=document.createElement("div")).style.color="white",f.style.background="black",f.style.position="absolute",f.style.top="10px",f.style.left="10px",c=document.createElement("pre"),f.appendChild(c),s.parentNode.appendChild(f),m=new URLSearchParams(window.location.search),l={numTriangles:Number(m.get("numTriangles"))||2e4,renderBundles:Boolean(m.get("renderBundles")),dynamicOffsets:Boolean(m.get("dynamicOffsets"))},p=s.getContext("webgpu"),g=navigator.gpu.getPreferredCanvasFormat(),p.configure({device:o,format:g,alphaMode:"opaque",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),y=o.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",minBindingSize:4}}]}),E=o.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",minBindingSize:20}}]}),v=o.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",hasDynamicOffset:!0,minBindingSize:20}}]}),B=4*Float32Array.BYTES_PER_ELEMENT,T=o.createPipelineLayout({bindGroupLayouts:[y,E]}),b=o.createPipelineLayout({bindGroupLayouts:[y,v]}),P=o.createShaderModule({code:u.a}),h={layout:"auto",vertex:{module:P,entryPoint:"vert_main",buffers:[{arrayStride:2*B,stepMode:"vertex",attributes:[{shaderLocation:0,offset:0,format:"float32x4"},{shaderLocation:1,offset:B,format:"float32x4"}]}]},fragment:{module:P,entryPoint:"frag_main",targets:[{format:g}]},primitive:{topology:"triangle-list",frontFace:"ccw",cullMode:"none"}},_=o.createRenderPipeline(d(d({},h),{},{layout:T})),A=o.createRenderPipeline(d(d({},h),{},{layout:b})),S=o.createBuffer({size:6*B,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0}),new Float32Array(S.getMappedRange()).set([0,.1,0,1,1,0,0,1,-.1,-.1,0,1,0,1,0,1,.1,-.1,0,1,0,0,1,1]),S.unmap(),G=w(),L=function(){G=w()},t.add(l,"numTriangles",0,2e5).step(1).onFinishChange(L),t.add(l,"renderBundles"),t.add(l,"dynamicOffsets"),F=void 0,M=void 0,O=void 0,x=!0,requestAnimationFrame(R);case 49:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}();n.default=function(){return Object(f.a)({name:"Animometer",description:"A WebGPU of port of the Animometer MotionMark benchmark.",gui:!0,init:m,sources:[{name:e.substring(t.length+1),contents:"import { makeSample, SampleInit } from '../../components/SampleLayout';\n\nimport animometerWGSL from './animometer.wgsl';\n\nconst init: SampleInit = async ({ canvasRef, gui }) => {\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n  const canvas = canvasRef.current;\n\n  if (canvas === null) return;\n\n  const perfDisplayContainer = document.createElement('div');\n  perfDisplayContainer.style.color = 'white';\n  perfDisplayContainer.style.background = 'black';\n  perfDisplayContainer.style.position = 'absolute';\n  perfDisplayContainer.style.top = '10px';\n  perfDisplayContainer.style.left = '10px';\n\n  const perfDisplay = document.createElement('pre');\n  perfDisplayContainer.appendChild(perfDisplay);\n  canvas.parentNode.appendChild(perfDisplayContainer);\n\n  const params = new URLSearchParams(window.location.search);\n  const settings = {\n    numTriangles: Number(params.get('numTriangles')) || 20000,\n    renderBundles: Boolean(params.get('renderBundles')),\n    dynamicOffsets: Boolean(params.get('dynamicOffsets')),\n  };\n\n  const context = canvas.getContext('webgpu') as GPUCanvasContext;\n\n  const presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n\n  context.configure({\n    device,\n    format: presentationFormat,\n    alphaMode: 'opaque',\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const timeBindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n          minBindingSize: 4,\n        },\n      },\n    ],\n  });\n\n  const bindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n          minBindingSize: 20,\n        },\n      },\n    ],\n  });\n\n  const dynamicBindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n          hasDynamicOffset: true,\n          minBindingSize: 20,\n        },\n      },\n    ],\n  });\n\n  const vec4Size = 4 * Float32Array.BYTES_PER_ELEMENT;\n  const pipelineLayout = device.createPipelineLayout({\n    bindGroupLayouts: [timeBindGroupLayout, bindGroupLayout],\n  });\n  const dynamicPipelineLayout = device.createPipelineLayout({\n    bindGroupLayouts: [timeBindGroupLayout, dynamicBindGroupLayout],\n  });\n\n  const shaderModule = device.createShaderModule({\n    code: animometerWGSL,\n  });\n  const pipelineDesc: GPURenderPipelineDescriptor = {\n    layout: 'auto',\n    vertex: {\n      module: shaderModule,\n      entryPoint: 'vert_main',\n      buffers: [\n        {\n          // vertex buffer\n          arrayStride: 2 * vec4Size,\n          stepMode: 'vertex',\n          attributes: [\n            {\n              // vertex positions\n              shaderLocation: 0,\n              offset: 0,\n              format: 'float32x4',\n            },\n            {\n              // vertex colors\n              shaderLocation: 1,\n              offset: vec4Size,\n              format: 'float32x4',\n            },\n          ],\n        },\n      ],\n    },\n    fragment: {\n      module: shaderModule,\n      entryPoint: 'frag_main',\n      targets: [\n        {\n          format: presentationFormat,\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n      frontFace: 'ccw',\n      cullMode: 'none',\n    },\n  };\n\n  const pipeline = device.createRenderPipeline({\n    ...pipelineDesc,\n    layout: pipelineLayout,\n  });\n\n  const dynamicPipeline = device.createRenderPipeline({\n    ...pipelineDesc,\n    layout: dynamicPipelineLayout,\n  });\n\n  const vertexBuffer = device.createBuffer({\n    size: 2 * 3 * vec4Size,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n\n  // prettier-ignore\n  new Float32Array(vertexBuffer.getMappedRange()).set([\n    // position data  /**/ color data\n    0, 0.1, 0, 1,     /**/ 1, 0, 0, 1,\n    -0.1, -0.1, 0, 1, /**/ 0, 1, 0, 1,\n    0.1, -0.1, 0, 1,  /**/ 0, 0, 1, 1,\n  ]);\n  vertexBuffer.unmap();\n\n  function configure() {\n    const numTriangles = settings.numTriangles;\n    const uniformBytes = 5 * Float32Array.BYTES_PER_ELEMENT;\n    const alignedUniformBytes = Math.ceil(uniformBytes / 256) * 256;\n    const alignedUniformFloats =\n      alignedUniformBytes / Float32Array.BYTES_PER_ELEMENT;\n    const uniformBuffer = device.createBuffer({\n      size: numTriangles * alignedUniformBytes + Float32Array.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n    });\n    const uniformBufferData = new Float32Array(\n      numTriangles * alignedUniformFloats\n    );\n    const bindGroups = new Array(numTriangles);\n    for (let i = 0; i < numTriangles; ++i) {\n      uniformBufferData[alignedUniformFloats * i + 0] =\n        Math.random() * 0.2 + 0.2; // scale\n      uniformBufferData[alignedUniformFloats * i + 1] =\n        0.9 * 2 * (Math.random() - 0.5); // offsetX\n      uniformBufferData[alignedUniformFloats * i + 2] =\n        0.9 * 2 * (Math.random() - 0.5); // offsetY\n      uniformBufferData[alignedUniformFloats * i + 3] =\n        Math.random() * 1.5 + 0.5; // scalar\n      uniformBufferData[alignedUniformFloats * i + 4] = Math.random() * 10; // scalarOffset\n\n      bindGroups[i] = device.createBindGroup({\n        layout: bindGroupLayout,\n        entries: [\n          {\n            binding: 0,\n            resource: {\n              buffer: uniformBuffer,\n              offset: i * alignedUniformBytes,\n              size: 6 * Float32Array.BYTES_PER_ELEMENT,\n            },\n          },\n        ],\n      });\n    }\n\n    const dynamicBindGroup = device.createBindGroup({\n      layout: dynamicBindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n            offset: 0,\n            size: 6 * Float32Array.BYTES_PER_ELEMENT,\n          },\n        },\n      ],\n    });\n\n    const timeOffset = numTriangles * alignedUniformBytes;\n    const timeBindGroup = device.createBindGroup({\n      layout: timeBindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n            offset: timeOffset,\n            size: Float32Array.BYTES_PER_ELEMENT,\n          },\n        },\n      ],\n    });\n\n    // writeBuffer too large may OOM. TODO: The browser should internally chunk uploads.\n    const maxMappingLength =\n      (14 * 1024 * 1024) / Float32Array.BYTES_PER_ELEMENT;\n    for (\n      let offset = 0;\n      offset < uniformBufferData.length;\n      offset += maxMappingLength\n    ) {\n      const uploadCount = Math.min(\n        uniformBufferData.length - offset,\n        maxMappingLength\n      );\n\n      device.queue.writeBuffer(\n        uniformBuffer,\n        offset * Float32Array.BYTES_PER_ELEMENT,\n        uniformBufferData.buffer,\n        uniformBufferData.byteOffset + offset * Float32Array.BYTES_PER_ELEMENT,\n        uploadCount * Float32Array.BYTES_PER_ELEMENT\n      );\n    }\n\n    function recordRenderPass(\n      passEncoder: GPURenderBundleEncoder | GPURenderPassEncoder\n    ) {\n      if (settings.dynamicOffsets) {\n        passEncoder.setPipeline(dynamicPipeline);\n      } else {\n        passEncoder.setPipeline(pipeline);\n      }\n      passEncoder.setVertexBuffer(0, vertexBuffer);\n      passEncoder.setBindGroup(0, timeBindGroup);\n      const dynamicOffsets = [0];\n      for (let i = 0; i < numTriangles; ++i) {\n        if (settings.dynamicOffsets) {\n          dynamicOffsets[0] = i * alignedUniformBytes;\n          passEncoder.setBindGroup(1, dynamicBindGroup, dynamicOffsets);\n        } else {\n          passEncoder.setBindGroup(1, bindGroups[i]);\n        }\n        passEncoder.draw(3, 1, 0, 0);\n      }\n    }\n\n    let startTime = undefined;\n    const uniformTime = new Float32Array([0]);\n\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: undefined, // Assigned later\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    const renderBundleEncoder = device.createRenderBundleEncoder({\n      colorFormats: [presentationFormat],\n    });\n    recordRenderPass(renderBundleEncoder);\n    const renderBundle = renderBundleEncoder.finish();\n\n    return function doDraw(timestamp: number) {\n      if (startTime === undefined) {\n        startTime = timestamp;\n      }\n      uniformTime[0] = (timestamp - startTime) / 1000;\n      device.queue.writeBuffer(uniformBuffer, timeOffset, uniformTime.buffer);\n\n      renderPassDescriptor.colorAttachments[0].view = context\n        .getCurrentTexture()\n        .createView();\n\n      const commandEncoder = device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n\n      if (settings.renderBundles) {\n        passEncoder.executeBundles([renderBundle]);\n      } else {\n        recordRenderPass(passEncoder);\n      }\n\n      passEncoder.end();\n      device.queue.submit([commandEncoder.finish()]);\n    };\n  }\n\n  let doDraw = configure();\n\n  const updateSettings = () => {\n    doDraw = configure();\n  };\n  gui\n    .add(settings, 'numTriangles', 0, 200000)\n    .step(1)\n    .onFinishChange(updateSettings);\n  gui.add(settings, 'renderBundles');\n  gui.add(settings, 'dynamicOffsets');\n\n  let previousFrameTimestamp = undefined;\n  let jsTimeAvg = undefined;\n  let frameTimeAvg = undefined;\n  let updateDisplay = true;\n\n  function frame(timestamp: number) {\n    // Sample is no longer the active page.\n    if (!canvas) return;\n\n    let frameTime = 0;\n    if (previousFrameTimestamp !== undefined) {\n      frameTime = timestamp - previousFrameTimestamp;\n    }\n    previousFrameTimestamp = timestamp;\n\n    const start = performance.now();\n    doDraw(timestamp);\n    const jsTime = performance.now() - start;\n    if (frameTimeAvg === undefined) {\n      frameTimeAvg = frameTime;\n    }\n    if (jsTimeAvg === undefined) {\n      jsTimeAvg = jsTime;\n    }\n\n    const w = 0.2;\n    frameTimeAvg = (1 - w) * frameTimeAvg + w * frameTime;\n    jsTimeAvg = (1 - w) * jsTimeAvg + w * jsTime;\n\n    if (updateDisplay) {\n      perfDisplay.innerHTML = `Avg Javascript: ${jsTimeAvg.toFixed(\n        2\n      )} ms\\nAvg Frame: ${frameTimeAvg.toFixed(2)} ms`;\n      updateDisplay = false;\n      setTimeout(() => {\n        updateDisplay = true;\n      }, 100);\n    }\n    requestAnimationFrame(frame);\n  }\n  requestAnimationFrame(frame);\n};\n\nconst Animometer: () => JSX.Element = () =>\n  makeSample({\n    name: 'Animometer',\n    description: 'A WebGPU of port of the Animometer MotionMark benchmark.',\n    gui: true,\n    init,\n    sources: [\n      {\n        name: __filename.substring(__dirname.length + 1),\n        contents: __SOURCE__,\n      },\n      {\n        name: './animometer.wgsl',\n        contents: animometerWGSL,\n        editable: true,\n      },\n    ],\n    filename: __filename,\n  });\n\nexport default Animometer;\n"},{name:"./animometer.wgsl",contents:u.a,editable:!0}],filename:e})}}.call(this,"src/sample/animometer/main.ts","src/sample/animometer")}}]);